/*!
 * Metascraper JavaScript Library v1.0.0
 * https://metascraper.com/
 *
 * Copyright Metascraper
 * Released under the MIT license
 * https://en.wikipedia.org/wiki/MIT_License
 *
 * Date: 2019-04-08T12:34Z
 */

var meta = { projectName: "Metascraper", version: "1.0.0", modes: { developer: 0, warning: 5, error: 9 }, options: { webApiPrefix: "http://localhost:54702/api/", attrName: "data-value", attrMemberName: "data-member", attrArrayName: "data-array", attrTextName: "data-text", attrHrefName: "data-href", attrClickName: "data-click", attrTypeName: "data-type", attrClassName: "data-class", attrScrapeName: "data-scrape", indexName: "{{*index}}", tokenName: "Token", scrape: !0, mode: 5 }, loadTypesEnum: Object.freeze({ Replace: 0, BeforeBeginAppend: 1, AfterBeginAppend: 2, BeforeEndAppend: 3, AfterEndAppend: 4 }), storeTypesEnum: Object.freeze({ ExpiryNoExtend: 1, ExpiryExtend: 2, OneTimeRead: 3, Forever: 4, Session: 5 }), dataTypesEnum: Object.freeze({ date: "date", time: "time", datetime: "datetime", month: "month", month1: "month1", month3: "month3", monthNum: "monthNum", monthNumPad: "monthNumPad", day: "day", day1: "day1", day2: "day2", day3: "day3", dayNum: "dayNum", dayNumPad: "dayNumPad", year: "year", year2: "year2", string: "string", number: "number", json: "json" }), send: function (e) { var t = meta.options.scrape; void 0 !== e.scrape && (t = e.scrape); var a = t ? this.scrape(!0) : {}; e.data && (a.data || (a.data = {}), this.extend(a.data, e.data)); var n = { contentType: "application/json", dataType: "json", data: a }; this.extend(n, e), -1 === n.url.indexOf("://") && (n.url = this.options.webApiPrefix + n.url), this.tokenize(n), this.ajax(n) }, receive: function (e) { var n = e.success, t = { contentType: "application/json", dataType: "json" }; this.extend(t, e), t.success = function (e, t, a) { meta.bind(e), n && n(e, t, a) }; var a = t.url.indexOf("://"); (-1 === a || 7 < a) && (t.url = this.options.webApiPrefix + t.url), this.tokenize(t), this.ajax(t) }, get: function (e) { var t = { method: "GET" }; this.extend(t, e), this.receive(t) }, post: function (e) { var t = { method: "POST" }; this.extend(t, e), this.send(t) }, put: function (e) { var t = { method: "PUT" }; this.extend(t, e), this.send(t) }, del: function (e) { var t = { method: "DELETE" }; this.extend(t, e), this.send(t) }, create: function (e) { this.post(e) }, read: function (e) { this.get(e) }, update: function (e) { this.put(e) }, save: function (e) { if (this.isNullOrUndefined(e.pk) || 0 === e.pk.length) throw arguments.callee.toString() + " - required parameter [pk] not found"; e.data = this.scrape(), e.scrape = !1, e.data[e.pk] && "0" !== e.data[e.pk] ? meta.update(e) : meta.create(e) }, authorize: function (e) { var t = meta.isNullOrUndefined(this.token()); return t && e && e.url && (window.location.href = e.url), !t }, token: function () { return window.localStorage.getItem(meta.options.tokenName) }, tokenize: function (e) { var t = meta.token(); if (!this.isNullOrUndefined(t)) { var a = { Authorization: "Bearer " + t }; this.isNullOrUndefined(e.headers) && (e.headers = {}), this.extend(e.headers, a) } }, login: function (e) { var n = e.success, t = { url: "Auth/Login" }; this.extend(t, e), t.success = function (e, t, a) { window.localStorage.setItem(meta.options.tokenName, e[meta.options.tokenName]), n && n(e, t, a) }, this.post(t) }, logout: function (e) { window.localStorage.removeItem(meta.options.tokenName), e && e.url && (windows.location.href = e.url) }, getValue: function (e) { if (e instanceof HTMLInputElement) return "checkbox" === e.type ? e.checked : e.value; if (e instanceof HTMLSelectElement) { if (e.multiple) { for (var t = [], a = e.selectedOptions, n = 0; n < a.length; n++) t.push(a[n].value); return t } return e.value } return e && e.innerHTML ? e.innerHTML : void 0 }, scrape: function () { for (var e = {}, t = meta.options.attrName, a = this.selectAll("[" + t + "]"), n = 0; n < a.length; n++) if (!(a[n] instanceof HTMLTableElement || a[n] instanceof HTMLUListElement)) { if (a[n].hasAttribute(meta.options.attrScrapeName)) if (!1 === JSON.parse(a[n].getAttribute(meta.options.attrScrapeName))) continue; e[a[n].getAttribute(t)] = meta.getValue(a[n]) } return e }, formatValue: function (e, t) { try { if (e.hasAttribute(meta.options.attrTypeName)) { var a = e.getAttribute(meta.options.attrTypeName); if (a === meta.dataTypesEnum.string); else if (a === meta.dataTypesEnum.number) t = new Number(t); else if (a === meta.dataTypesEnum.date || a === meta.dataTypesEnum.time || a === meta.dataTypesEnum.datetime || a === meta.dataTypesEnum.month || a === meta.dataTypesEnum.month1 || a === meta.dataTypesEnum.month3 || a === meta.dataTypesEnum.monthNum || a === meta.dataTypesEnum.monthNumPad || a === meta.dataTypesEnum.day || a === meta.dataTypesEnum.day1 || a === meta.dataTypesEnum.day2 || a === meta.dataTypesEnum.day3 || a === meta.dataTypesEnum.dayNum || a === meta.dataTypesEnum.dayNumPad || a === meta.dataTypesEnum.year || a === meta.dataTypesEnum.year2) { if (t = new Date(t), a === meta.dataTypesEnum.date) t = t.toLocaleDateString(); else if (a === meta.dataTypesEnum.time) t = t.toLocaleTimeString(); else if (a === meta.dataTypesEnum.datetime) t = t.toLocaleString(); else if (a === meta.dataTypesEnum.month) { var n = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; t = n[t.getMonth()] } else if (a === meta.dataTypesEnum.month1) { t = n[t.getMonth()] } else if (a === meta.dataTypesEnum.month3) { t = n[t.getMonth()] } else if (a === meta.dataTypesEnum.monthNum) t = t.getMonth() + 1; else if (a === meta.dataTypesEnum.monthNumPad) { var r = t.getMonth() + 1; t = r < 10 ? "0" + r.toString() : r.toString() } else if (a === meta.dataTypesEnum.day) { t = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][t.getDay()] } else if (a === meta.dataTypesEnum.day1) { t = ["S", "M", "T", "W", "T", "F", "S"][t.getDay()] } else if (a === meta.dataTypesEnum.day2) { t = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"][t.getDay()] } else if (a === meta.dataTypesEnum.day3) { t = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][t.getDay()] } else if (a === meta.dataTypesEnum.dayNum) t = t.getDate(); else if (a === meta.dataTypesEnum.dayNumPad) { var o = t.getDate(); t = o < 10 ? "0" + o.toString() : o.toString() } else if (a === meta.dataTypesEnum.year) t = t.getFullYear(); else if (a === meta.dataTypesEnum.year2) { var i = t.getFullYear(); if (-10 < i && i < 10) t = i < 0 ? "-0" + (-1 * i).toString() : "0" + i.toString(); else if (i < 100 && -100 < i) t = i; else { var s = i.toString(); s = i.substr(s.length - 2, 2), i < 0 && (s = "-" + s), t = parseInt(s) } } } else a === meta.dataTypesEnum.json && (t = JSON.stringify(t)) } } catch (e) { } return t }, setValue: function (e, t) { t = meta.formatValue(e, t), e instanceof HTMLSelectElement ? e.value = t : e instanceof HTMLInputElement ? "checkbox" === e.type ? e.checked = t : e.value = t : e.innerHTML = t }, paint: function (e, t) { t = t || document; for (var a = meta.options.attrName, n = this.selectAll("[" + a + "]", t), r = 0; r < n.length; r++) { var o = null; if (n[r].hasAttribute(meta.options.attrMemberName)) { var i = n[r].getAttribute(meta.options.attrMemberName); i && e[i] && (o = e[i][n[r].getAttribute(a)]) } else o = e[n[r].getAttribute(a)]; meta.isNullOrUndefined(o) ? meta.log("metascraper::paint", "unable to find data-value [" + n[r].getAttribute(a) + "]", meta.modes.warning) : meta.setValue(n[r], o) } }, fill: function (e, t) { var a, n, r = e.getAttribute(meta.options.attrName); if (e instanceof HTMLSelectElement) { if (this.isNullOrUndefined(r) || !e.hasAttribute(meta.options.attrTextName)) return; for (var o = e.getAttribute(meta.options.attrTextName), i = e.getAttribute(meta.options.attrClassName), s = 0; s < t.length; s++) { var d = document.createElement("option"); i && 0 < i.length && d.classList.add(i), d.value = t[s][r], d.text = meta.formatValue(e, t[s][o]), e.add(d, null) } } else if (e instanceof HTMLTableElement) { var l = e.tHead; if (this.isNullOrUndefined(l) || this.isNullOrUndefined(l.rows) || 0 === l.rows.length) return; var u = l.rows[0].cells; if (this.isNullOrUndefined(u) || 0 === u.length) return; for (var m = meta.getElemAttr(l.rows[0], meta.options.attrHrefName), c = meta.getElemAttr(l.rows[0], meta.options.attrClickName), p = meta.getElemAttr(l.rows[0], meta.options.attrClassName), f = 0; f < t.length; f++) { var h = e.tBodies[0]; meta.isNullOrUndefined(h) && (h = e.appendChild(document.createElement("tbody"))); var y = h.insertRow(-1); if (m && 0 < m.length && c && 0 < c.length) throw "ERROR reported by " + meta.projectName + ". Cannot apply " + meta.options.attrHrefName + " and " + meta.options.attrClickName + " to a tr element."; if (m && 0 < m.length) { var g = 0 < r.length ? m.replace(meta.options.indexName, t[f][r]) : m; y.setAttribute("onclick", "location.href = '" + g + "'") } if (c && 0 < c.length) { var T = 0 < r.length ? c.replace(meta.options.indexName, t[f][r]) : c; y.setAttribute("onclick", T) } p && 0 < p.length && y.classList.add(p); for (var N = 0; N < u.length; N++) { var E = y.insertCell(-1); if (u[N].hasAttribute(meta.options.attrTextName)) { var v = meta.getElemAttr(u[N], meta.options.attrHrefName), b = meta.getElemAttr(u[N], meta.options.attrClickName), x = u[N].getAttribute(meta.options.attrTextName), S = meta.getElemAttr(u[N], meta.options.attrClassName); if (S && 0 < S.length && E.classList.add(S), void 0 !== t[f][x]) { var A = meta.formatValue(u[N], t[f][x]); v && 0 < v.length ? (a = document.createElement("a"), n = document.createTextNode(A), a.appendChild(n), b && 0 < b.length && a.setAttribute("onclick", b.replace(meta.options.indexName, t[f][r])), a.href = v.replace(meta.options.indexName, t[f][r]), E.innerHTML = a.outerHTML) : (E.innerHTML = A, b && 0 < b.length && E.setAttribute("onclick", b.replace(meta.options.indexName, t[f][r]))) } } } } } else if (e instanceof HTMLUListElement) { var w = meta.getElemAttr(e, meta.options.attrTextName); if (!w) return; for (var L = meta.getElemAttr(e, meta.options.attrHrefName), M = meta.getElemAttr(e, meta.options.attrClickName), O = meta.getElemAttr(e, meta.options.attrClassName), k = 0; k < t.length; k++) { var H = document.createElement("li"); O && 0 < O.length && H.classList.add(O); var C = meta.formatValue(e, t[k][w]); L && 0 < L.length ? (a = document.createElement("a"), n = document.createTextNode(C), a.appendChild(n), M && 0 < M.length && a.setAttribute("onclick", M.replace(meta.options.indexName, t[k][r])), a.href = L.replace(meta.options.indexName, t[k][r]), H.appendChild(a)) : (H.appendChild(document.createTextNode(C)), M && 0 < M.length && H.setAttribute("onclick", M.replace(meta.options.indexName, t[k][r]))), t[k][r] && H.setAttribute("id", t[k][r]), e.appendChild(H) } } }, populate: function (e, t) { t = t || document; for (var a = meta.options.attrArrayName, n = this.selectAll("[" + a + "]", t), r = 0; r < n.length; r++) { var o = e[n[r].getAttribute(a)] ? e[n[r].getAttribute(a)] : e; meta.fill(n[r], o) } }, bind: function (e, t) { t = t || document, meta.populate(e, t), meta.paint(e, t) }, load: function (e) { var n = e.success, r = e.elem, o = { method: "GET", url: e.url }; this.extend(o, e), o.success = function (e, t, a) { o.loadType === meta.loadTypesEnum.BeforeBeginAppend ? r.outerHTML = e + r.outerHTML : o.loadType === meta.loadTypesEnum.AfterBeginAppend ? r.innerHTML = e + r.innerHTML : o.loadType === meta.loadTypesEnum.BeforeEndAppend ? r.innerHTML = r.innerHTML + e : o.loadType === meta.loadTypesEnum.AfterEndAppend ? r.innerHTML = r.outerHTML + e : r.innerHTML = e, n && n(e, t, a) }, this.ajax(o) }, loadHeader: function (e) { var t = { elem: document.body, loadType: meta.loadTypesEnum.AfterBeginAppend }; this.extend(t, e), this.load(t) }, loadFooter: function (e) { var t = { elem: document.body, loadType: meta.loadTypesEnum.BeforeEndAppend }; this.extend(t, e), this.load(t) }, loadScript: function (e) { meta.isNullOrUndefined(e.url) && meta.log("metascraper::loadScript", "unable to find required attribute [url]", meta.modes.error); var r = e.success, t = { method: "GET" }; meta.extend(t, e), t.success = function (e, t, a) { var n = document.createElement("script"); n.textContent = e, document.head.appendChild(n), r && r(e, t, a) }, meta.ajax(t) }, loadLinkFile: function (e) { meta.isNullOrUndefined(e.rel) && meta.log("metascraper::loadLinkFile", "unable to find required attribute [rel]", meta.modes.error), meta.isNullOrUndefined(e.type) && meta.log("metascraper::loadLinkFile", "unable to find required attribute [type]", meta.modes.error), meta.isNullOrUndefined(e.url) && meta.log("metascraper::loadLinkFile", "unable to find required attribute [url]", meta.modes.error); var t = document.createElement("link"); t.readyState ? t.onreadystatechange = function () { "loaded" !== t.readyState && "complete" !== t.readyState || (t.onreadystatechange = null, e.success && e.success()) } : t.onload = function () { e.success && e.success() }, meta.extend(t, e), t.href = e.url, document.getElementsByTagName("head")[0].appendChild(t) }, loadStyleSheet: function (e) { var t = { rel: "stylesheet", type: "text/css" }; meta.extend(t, e), meta.loadLinkFile(t) }, data: {}, store_set: function (e, t, a, n) { a = a || meta.storeTypesEnum.Forever, n = n || 720; var r = this.toString(t), o = new Date, i = { value: r, type: a, expiry: n, created: o.getTime(), lastread: o.getTime() }, s = a === meta.storeTypesEnum.Session ? window.sessionStorage : window.localStorage, d = JSON.stringify(i); s.setItem(e, d) }, store_get: function (t) { var e = window.localStorage, a = e.getItem(t); if (this.isNullOrUndefined(a) && (a = (e = window.sessionStorage).getItem(t)), this.isNullOrUndefined(a)) return null; try { var n, r, o = JSON.parse(a); if (o.type === meta.storeTypesEnum.Session) return o.value; if (o.type === meta.storeTypesEnum.Forever) return o.value; if (o.type === meta.storeTypesEnum.OneTimeRead) { var i = o.value; return e.setItem(t, null), i } if (o.type === meta.storeTypesEnum.ExpiryNoExtend) { if ((n = new Date).setTime(o.created), n.setMinutes(n.getMinutes() + o.expiry), (r = new Date).getTime() <= n.getTime()) return o.value } else if (o.type === meta.storeTypesEnum.ExpiryExtend && ((n = new Date).setTime(o.lastread), n.setMinutes(n.getMinutes() + o.expiry), (r = new Date).getTime() <= n.getTime())) return o.lastread = r.getTime(), e.setItem(t, JSON.stringify(o)), o.value } catch (e) { meta.log("metascraper::store_get", "error getting value: [" + t + "], error: [" + meta.toString(e) + "], returning null", meta.modes.warning) } return null }, filter: function (e, t, a, n) { for (var r = [], o = 0; o < e.length; o++) if (e[o][t] === a) { if (n) return e[o]; r.push(e[o]) } return r }, getUrlParam: function (e, t) { t = t || window.location.href, e = e.replace(/[\[\]]/g, "\\$&"); var a = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)").exec(t); return a ? a[2] ? decodeURIComponent(a[2].replace(/\+/g, " ")) : "" : null }, getElemAttr: function (e, t) { return e && e.hasAttribute && e.getAttribute && e.hasAttribute(t) ? e.getAttribute(t) : "" }, unique: function () { return (new Date).getTime() }, copy: function (e) { if (null === e || "object" != typeof e) return e; if (e instanceof Node) return e.outerHTML ? this.parseHTML(e.outerHTML) : e.cloneNode(!0); if (e instanceof NodeList) { for (var t, a, n = document.createDocumentFragment(), r = e.childNodes ? e.childNodes.length : e.length, o = 0; o < r; o++) t = null, e.childNodes && e.childNodes.length && e.childNodes[o] ? t = e.childNodes[o] : e.length && e[o] && (t = e[o]), this.isNullOrUndefined(t) || (a = this.copy(t), n.appendChild(a)); return n } if (e.constructor === Array || e.constructor === Object) try { return JSON.parse(JSON.stringify(e)) } catch (e) { console.log("Error: meta.copy: unable to parse source as json") } if (e.constructor !== Date) return new e.constructor(e); var i = new Date; return i.setTime(e.getTime()), i }, toString: function (e) { if (null === e || "object" != typeof e) return e + ""; if (e.constructor === Array || e.constructor === Object) try { return JSON.stringify(e) } catch (e) { console.log("Error: meta.toString: unable to parse source as json") } if (e instanceof Node && e.outerHTML) return e.outerHTML; if (e instanceof NodeList) { var t = ""; if (e && e.childNodes && e.childNodes.length && 0 < e.childNodes.length) for (var a = 0; a < e.childNodes.length; a++) this.isNullOrUndefined(e.childNodes[a]) || (e.childNodes[a].outerHTML ? t += e.childNodes[a].outerHTML : e.childNodes[a].textContent && (t += e.childNodes[a].textContent)); return t } return e.toString() }, log: function (e, t, a) { if (a >= this.options.mode) { var n = e + "::" + t; switch (a) { case this.modes.error: console.error ? console.error("ERROR  " + n) : console.log("ERROR  " + n); break; case this.modes.warning: console.warn ? console.warn("WARNING  " + n) : console.log("WARNING  " + n); break; default: console.log(n) } } }, tryParseJsonObject: function (t) { try { var e = JSON.parse(t); if (e && "object" == typeof e) return e } catch (e) { this.log("meta.tryParseJsonObject", "Unable to parse value - error: " + e + " - value: " + meta.toString(t), this.modes.warning) } return !1 }, isJson: function (e) { try { var t = JSON.stringify(e); return !1 !== this.tryParseJsonObject(t) } catch (e) { this.log("meta.isJson", "error: " + e + " - value: " + meta.toString(jsonString), this.modes.warning) } return !1 }, eachJsonKey: function (e, t) { for (var a = 0; a < Object.keys(e).length; a++) { var n = Object.keys(e)[a]; t(n, e[n]) } }, versionCheck: function (e, t) { if (e === t) return !0; for (var a = e.toString().split("."), n = t.toString().split("."), r = 0; r < n.length; r++) { if (a.length === r) return !1; if (parseInt(a[r]) > parseInt(n[r])) return !0; if (parseInt(a[r]) < parseInt(n[r])) return !1 } return !0 }, async: function (a, n) { window.setTimeout(function () { var t = { data: void 0, success: function () { }, error: function () { var e = textStatus || "Unhandled Error"; throw { errorThrown: errorThrown, textStatus: e } } }; meta.extend(t, n); try { var e = a(t.data); t.success(e) } catch (e) { t.error(e) } }, 1, n) }, isNullOrUndefined: function (e) { return null == e }, extend: function (e, t) { for (var a in t) { var n = t[a]; if (null === n || "object" != typeof n || n instanceof Node) e[a] = n; else if (t.constructor === Date) { var r = new Date; r.setTime(n.getTime()), e[a] = r } else this.isNullOrUndefined(e[a]) && (e[a] = Array.isArray(t) ? [] : {}), e[a] = this.extend(e[a], n) } return e }, ajax: function (e) { var a = new XMLHttpRequest, n = { method: "GET", async: !0, headers: {}, key: "", success: function (e, t, a) { }, error: function (e, t, a) { throw { errorThrown: a, textStatus: t || "Unhandled Error" } } }; if (this.extend(n, this.ajaxSetup), this.extend(n, e), !n.url) throw new Error("url parameter must be set.", "Missing option"); n.method = n.method.toUpperCase(); if (["GET", "POST", "PUT", "DELETE"].indexOf(n.method) < 0) throw 'Request method "' + n.method + '" is not supported. Use one of GET | POST | PUT | DELETE'; if (a.addEventListener("readystatechange", function (e) { if (4 === a.readyState) if (n.statusCode && n.statusCode[a.status]) n.statusCode[a.status](a.response, a.statusText, a), n.error(a, a.statusText, a.response); else if (200 === a.status) { var t; try { t = JSON.parse(a.response) } catch (e) { t = a.response } 0 < n.key.length && (meta.data[n.key] = t), n.success(t, a.statusText, a) } else n.error(a, a.statusText, a.response) }, !1), a.open(n.method, n.url, n.async), a.setRequestHeader("X-Requested-With", "XMLHttpRequest"), this.eachJsonKey(n.headers, function (e, t) { a.setRequestHeader(e, t) }), n.data instanceof FormData) a.send(n.data); else try { n.data && "string" != typeof n.data && (n.data = meta.toString(n.data)), a.setRequestHeader("Content-Type", "application/json"), a.send(n.data) } catch (e) { throw new e } }, ajaxSetup: {}, ready: function (e) { var t = document.readyState; "interactive" === t || "complete" === t ? e() : setTimeout(function () { meta.ready(e) }, 100) }, select: function (e) { return document.getElementById(e) }, selectAll: function (e, t) { return (t = t || document).querySelectorAll(e) }, parseHTML: function () { var s = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, d = /<([\w:]+)/, l = /<|&#?\w+;/, u = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] }; return function (e, t) { if (this.isNullOrUndefined(e)) return null; var a, n, r, o, i = (t = t || document).createDocumentFragment(); if (l.test(e)) { for (a = i.appendChild(t.createElement("div")), n = (d.exec(e) || ["", ""])[1].toLowerCase(), r = u[n] || u._default, a.innerHTML = r[1] + e.replace(s, "<$1></$2>") + r[2], o = r[0]; o--;) a = a.lastChild; for (i.removeChild(i.firstChild) ; a.firstChild;) i.appendChild(a.firstChild) } else i.appendChild(t.createTextNode(e)); return i } }() };